// Code generated by options-gen. DO NOT EDIT.
package consumer

import (
	"crypto/tls"
	fmt461e464ebed9 "fmt"
	"time"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from variable
	o.logger = defaultOptions.logger

	o.name = defaultOptions.name

	o.tlsConfig = defaultOptions.tlsConfig

	o.brokers = defaultOptions.brokers

	o.topic = defaultOptions.topic

	o.consGroup = defaultOptions.consGroup

	o.minBytes = defaultOptions.minBytes

	o.maxBytes = defaultOptions.maxBytes

	o.maxWait = defaultOptions.maxWait

	o.retentionTime = defaultOptions.retentionTime

	o.commitInterval = defaultOptions.commitInterval

	o.decoder = defaultOptions.decoder

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithLogger(opt ILogger) OptOptionsSetter {
	return func(o *Options) {
		o.logger = opt

	}
}

func WithName(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.name = opt

	}
}

func WithTlsConfig(opt *tls.Config) OptOptionsSetter {
	return func(o *Options) {
		o.tlsConfig = opt

	}
}

func WithBrokers(opt []string) OptOptionsSetter {
	return func(o *Options) {
		o.brokers = opt

	}
}

func WithTopic(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.topic = opt

	}
}

func WithConsGroup(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.consGroup = opt

	}
}

func WithMinBytes(opt int) OptOptionsSetter {
	return func(o *Options) {
		o.minBytes = opt

	}
}

func WithMaxBytes(opt int) OptOptionsSetter {
	return func(o *Options) {
		o.maxBytes = opt

	}
}

func WithMaxWait(opt time.Duration) OptOptionsSetter {
	return func(o *Options) {
		o.maxWait = opt

	}
}

// consumer group retention time. consumer group will be keep in kafka for this period.
func WithRetentionTime(opt time.Duration) OptOptionsSetter {
	return func(o *Options) {
		o.retentionTime = opt

	}
}

// 0 - means sync mode.
func WithCommitInterval(opt time.Duration) OptOptionsSetter {
	return func(o *Options) {
		o.commitInterval = opt

	}
}

func WithDecoder(opt IDecoder) OptOptionsSetter {
	return func(o *Options) {
		o.decoder = opt

	}
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("logger", _validate_Options_logger(o)))
	errs.Add(errors461e464ebed9.NewValidationError("name", _validate_Options_name(o)))
	errs.Add(errors461e464ebed9.NewValidationError("brokers", _validate_Options_brokers(o)))
	errs.Add(errors461e464ebed9.NewValidationError("topic", _validate_Options_topic(o)))
	return errs.AsError()
}

func _validate_Options_logger(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.logger, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `logger` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_name(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.name, "required,min=1"); err != nil {
		return fmt461e464ebed9.Errorf("field `name` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_brokers(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.brokers, "required,min=1"); err != nil {
		return fmt461e464ebed9.Errorf("field `brokers` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_topic(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.topic, "required,min=1"); err != nil {
		return fmt461e464ebed9.Errorf("field `topic` did not pass the test: %w", err)
	}
	return nil
}
